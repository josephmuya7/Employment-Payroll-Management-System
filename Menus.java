/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package employee.payroll.system;

import com.github.sarxos.webcam.*;
import com.github.sarxos.webcam.ds.buildin.WebcamDefaultDriver;
import com.github.sarxos.webcam.ds.ipcam.IpCamDeviceRegistry;
import com.github.sarxos.webcam.ds.ipcam.IpCamDriver;
import com.github.sarxos.webcam.ds.ipcam.IpCamMode;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadFactory;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JPanel;
import com.github.sarxos.webcam.WebcamResolution;
import java.awt.Color;
import java.awt.Font;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Calendar;
import javax.swing.SwingConstants;

/**
 *
 * @author SSohan
 */
public class Menus extends javax.swing.JFrame implements Runnable, ThreadFactory {

    /**
     * Creates new form Menus
     */
    private static final long serialVersionUID = 6441489157408381878L;

    public static class MyCompositeDriver extends WebcamCompositeDriver {

        public MyCompositeDriver() {
            add(new WebcamDefaultDriver());
            add(new IpCamDriver());
        }
    }

    static {
        Webcam.setDriver(new MyCompositeDriver());
    }

    private Executor executor = Executors.newSingleThreadExecutor(this);
    Webcam webcam, built;

    String user, sub;

    public Menus() throws MalformedURLException, FileNotFoundException, IOException {
        initComponents();

        File file = new File("log.txt");

        BufferedReader br = new BufferedReader(new FileReader(file));

        user = br.readLine();
        sub = br.readLine();
        br.close();
        as.setText("Logged as user : " + user + "      Subject: " + sub);
        as.setFont(new Font("Serif", Font.BOLD, 20));
        final JPanel jPanelCamera = new JPanel();
        final JPanel jPanelCamera2 = new JPanel();

        cam.addTab(
                "QR camera", jPanelCamera);
        cam.addTab(
                "Face Camera", jPanelCamera2);
        textarea.setEditable(
                false);

        try {
            IpCamDeviceRegistry.register("IPWebCam", "http://192.168.137.123:8080/videofeed", IpCamMode.PUSH);
        } catch (Exception e) {
            ////
        }
        built = Webcam.getWebcamByName("USB2.0 VGA UVC WebCam 0");
        webcam = Webcam.getWebcamByName("IPWebCam");

        webcam.setViewSize(WebcamResolution.VGA.getSize());

        WebcamPanel webcamPanel = new WebcamPanel(webcam);
        webcamPanel.setFPSDisplayed(
                true);
        //webcamPanel.setDisplayDebugInfo(true);
        webcamPanel.setImageSizeDisplayed(
                true);
        //webcamPanel.setMirrored(true);
        jPanelCamera.add(webcamPanel);

        jPanelCamera.getParent()
                .revalidate();
        built.setViewSize(WebcamResolution.VGA.getSize());

        WebcamPanel webcamPanel2 = new WebcamPanel(built);

        webcamPanel2.setFPSDisplayed(
                true);
        //webcamPanel.setDisplayDebugInfo(true);
        webcamPanel2.setImageSizeDisplayed(
                true);
        webcamPanel2.setMirrored(
                true);
        jPanelCamera2.add(webcamPanel2);

        jPanelCamera2.getParent()
                .revalidate();

        executor.execute(
                this);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        cam = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textarea = new javax.swing.JTextArea();
        label = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        last = new javax.swing.JLabel();
        lastlast = new javax.swing.JLabel();
        as = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Menus");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cam, javax.swing.GroupLayout.PREFERRED_SIZE, 678, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cam, javax.swing.GroupLayout.PREFERRED_SIZE, 533, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Information"));

        textarea.setColumns(20);
        textarea.setRows(5);
        jScrollPane1.setViewportView(textarea);

        jLabel1.setText("N.B. Put your ID card on Phone Camera;");

        jLabel2.setText("Last Scanned ID :");

        last.setText("none");

        lastlast.setText("none");

        as.setText("Login As User  and subject");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 488, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(label, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(91, 91, 91))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(last, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lastlast, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(as, javax.swing.GroupLayout.PREFERRED_SIZE, 425, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(as, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(label, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(last)
                    .addComponent(lastlast))
                .addGap(18, 18, 18)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jMenu1.setText("Menu    ");

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText("Logout                                          ");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuItem5.setText("Exit");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit/Add     ");

        jMenuItem1.setText("Add                                                    ");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);
        jMenu2.add(jSeparator1);

        jMenuItem2.setText("Edit");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuBar1.add(jMenu2);

        jMenu4.setText("View    ");

        jMenuItem3.setText("Attendance Sheet");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem3);

        jMenuBar1.add(jMenu4);

        jMenu6.setText("Search");

        jMenuItem6.setText("ID card");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem6);

        jMenuBar1.add(jMenu6);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        this.dispose();
        this.stop();
        new Login().loginRun();

    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        System.exit(1);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        this.dispose();
        this.stop();
        new AddInformation().AddInfo();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        this.dispose();
        this.stop();
        new EditInformation().editInfo();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        this.dispose();
        this.stop();
        new View().viewRun();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        this.dispose();
        this.stop();
        new Search().searchRun();
        
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    /**
     * @param args the command line arguments
     */
    public void menurun() {
        this.setVisible(true);
    }
    boolean exit = false;

    @Override
    public void run() {
        exit = false;
        do {
            try {
                Thread.sleep(200);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            Result result = null;
            BufferedImage image = null;
            // z+="a";
            if (webcam.isOpen()) {

                if ((image = webcam.getImage()) == null) {
                    continue;
                }

                LuminanceSource source = new BufferedImageLuminanceSource(image);
                BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));

                try {
                    result = new MultiFormatReader().decode(bitmap);
                } catch (NotFoundException e) {
                    // textarea.setText(z);
                    // fall thru, it means there is no QR code in image
                }
            }
            label.setHorizontalAlignment(SwingConstants.CENTER);
            label.setVerticalAlignment(SwingConstants.CENTER);
            //
            //label.setBackground(Color.white);
            if (result != null) {
                try {
                    Toolkit.getDefaultToolkit().beep();
                    textarea.setText(result.getText());
                    if (last.getText().equals(result.getText()) || lastlast.getText().equals(result.getText())) {
                        Thread.sleep(1000);
                        continue;
                    }
                    String roll = result.getText();
                    //Here We will check in database and made log with that roll.. if Roll is correct a picture will
                    //saved
                    String url = "jdbc:sqlserver://DESKTOP-KM1V429\\SQLEXPRESS;databaseName=Student;integratedSecurity=true";
                    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                    Connection conn = DriverManager.getConnection(url);

                    String SQL = "SELECT * FROM STUDENTINFO WHERE ID = " + "'" + roll + "'";
                    PreparedStatement ps = null;
                    ps = conn.prepareStatement(SQL);
                    ResultSet rs = null;
                    rs = ps.executeQuery();

                    int coun = 0;
                    while (rs.next()) {
                        coun++;
                    }
                    String text;

                    if (coun >= 1) {
                        text = "ID RECORDED";
                        last.setForeground(Color.BLUE);
                        lastlast.setForeground(Color.BLUE);
                        lastlast.setText(last.getText());
                        label.setText(text);
                        label.setFont(new Font("Serif", Font.PLAIN, 35));
                        label.setForeground(Color.WHITE);
                        label.setBackground(Color.green);
                        label.setOpaque(true);
                        last.setText(roll);
                        Thread.sleep(1000); // face image will taken 1s later
                        image = built.getImage();
                        ImageIO.write(image, "PNG", new File("img.png"));
                        File pp = new File("img.png");
                        Calendar cal = Calendar.getInstance();
                        java.sql.Timestamp timestamp = new java.sql.Timestamp(cal.getTimeInMillis());

                        SQL = "insert into logs values(?,?,?,?,?,?)";
                        ps = conn.prepareStatement(SQL);
                        ps.setString(1, roll);
                        ps.setString(2, "ACCEPTED");
                        FileInputStream fin = new FileInputStream(pp);
                        ps.setBinaryStream(3, (InputStream) fin, (int) pp.length());
                        ps.setTimestamp(4, timestamp);
                        ps.setString(5, user);
                        ps.setString(6, sub);
                        ps.executeUpdate();
                        Thread.sleep(1000);
                        label.setText("");
                        label.setBackground(Color.white);
                    } else {
                        text = "WRONG ID";
                        label.setText("<html><div style='text-align: center;'>" + text + "</div></html>");
                        label.setFont(new Font("Serif", Font.PLAIN, 35));
                        label.setForeground(Color.white);
                        label.setBackground(Color.red);
                        label.setOpaque(true);
                        image = built.getImage();
                        ImageIO.write(image, "PNG", new File("img.png"));
                        File pp = new File("img.png");
                        Calendar cal = Calendar.getInstance();
                        java.sql.Timestamp timestamp = new java.sql.Timestamp(cal.getTimeInMillis());

                        SQL = "insert into logs values(?,?,?,?,?,?)";
                        ps = conn.prepareStatement(SQL);
                        ps.setString(1, roll);
                        ps.setString(2, "REJECTED");
                        FileInputStream fin = new FileInputStream(pp);
                        ps.setBinaryStream(3, (InputStream) fin, (int) pp.length());
                        ps.setTimestamp(4, timestamp);
                        ps.setString(5, null);
                        ps.setString(6, null);
                        ps.executeUpdate();

                        Thread.sleep(1000);

                    }
                } catch (ClassNotFoundException | SQLException ex) {
                    Logger.getLogger(Menus.class
                            .getName()).log(Level.SEVERE, null, ex);

                } catch (InterruptedException ex) {
                    Logger.getLogger(Menus.class
                            .getName()).log(Level.SEVERE, null, ex);

                } catch (IOException ex) {
                    Logger.getLogger(Menus.class
                            .getName()).log(Level.SEVERE, null, ex);
                }
            }
            label.setOpaque(false);
            label.setFont(new Font("Serif", Font.PLAIN, 35));
            label.setText("Insert ID Card");
            label.setForeground(Color.black);
        } while (!exit);
        webcam.close();
        built.close();

    }

    @Override
    public Thread newThread(Runnable r) {
        Thread t = new Thread(r, "example-runner");
        t.setDaemon(true);
        return t;
    }

    public void stop() {
        exit = true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel as;
    private javax.swing.JTabbedPane cam;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JLabel label;
    private javax.swing.JLabel last;
    private javax.swing.JLabel lastlast;
    private javax.swing.JTextArea textarea;
    // End of variables declaration//GEN-END:variables

}
